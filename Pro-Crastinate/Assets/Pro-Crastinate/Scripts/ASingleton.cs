// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using System.Collections;
using System.Collections.Generic;

namespace RMX
{
	public interface ISingleton {
		string name { get; }
//		ISingleton Singleton { get; set; }
		bool Destroyed { get; }
	}


	public abstract class ASingleton<T> : RMXObject, ISingleton
	where T : MonoBehaviour {

		private static T _singleton = null;

		private static bool _isInitialized = false;


		protected virtual bool SetupComplete {
			get{ 
				return true;
			}
		}

		public static bool IsInitialized {
			get {
				return _isInitialized && (_singleton as ASingleton<T>).SetupComplete;
			}
		}



		protected GameController gameController {
			get {
				return GameController.current;
			}
		}

		protected GameData gameData {
			get {
				return GameData.current;
			}
		}

		protected GameCenter gameCenter {
			get {
				return GameCenter.current;
			}
		}

		protected Settings settings {
			get {
				return Settings.current;
			}
		}

		public static T current {
			get {
				if (IsInitialized) {
					return _singleton as T;
				} else {
					return Initialize() as T;
				}
			}
		}

		const string tempName = "324329hrNhfeuwh9";
		private bool _destroyed = false;
		public bool Destroyed {
			get {
				return _destroyed;
			}
		}




		public static T Initialize() {
			if (IsInitialized) 
				return _singleton;
			else {// if (ReadyToInitialize<T>()) {
				var aSingleton = new GameObject (tempName).AddComponent<T> ();
				if ((aSingleton as ISingleton).Destroyed) {
					return null;
				}
				aSingleton.gameObject.name = aSingleton.GetType ().Name;
				if (!(aSingleton is GameController)) {
					var parent = GameController.current.gameObject;
					aSingleton.gameObject.transform.SetParent (parent.transform);
				}
				return aSingleton;
			} 
//			else {
//				Debug.LogError("Gamecontroller should happen before this...");
////				GameController.lateInits.Add(Initialize);
//				return null;
//			}
		}

//		public static T Initialize(GameObject withGameObjet) {
//			if (isInitialized) 
//				return _singleton;
//			else {
//				var aSingleton = withGameObjet.AddComponent<T> ();
//				aSingleton.gameObject.name = aSingleton.GetType().Name;
//				return aSingleton;
//			}
//		}

		private void warining() {
			if (!Settings.IsInitialized)
				Debug.LogWarning ("Setting not initialized before debugger");
		}

		protected void Awake() {
			var message = "<color=cyan> new </color> <color=lightblue>" + this.GetType().Name + "</color>()";
			if (_singleton == null) {
				DontDestroyOnLoad (gameObject);
				_singleton = this as T;// as T;
				if (this is EventListener) {
					Notifications.AddListener(this as EventListener);
				}
				_isInitialized = true;
			} 
			else if (_singleton != this) {
				if (gameObject.name == tempName) {// gameObject.name == this.GetType().Name &&
					message += " -- <color=red> DELETING REDUNDANT " + this.GetType().Name + "</color>()";
					_destroyed = true;
					Destroy (gameObject);
					Destroy (this);
				} else {
					message += " -- <color=orange> DELETING REDUNDANT ASingleton: </color> " + this.GetType().Name + "</color>()";
					_destroyed = true;
					Destroy(this);
				}
			}
			if (Bugger.WillLog(Testing.Singletons, message))
				Debug.Log (Bugger.Last);
		}

	}
}

